#include <iostream>
#include <vector>
#include <unordered_map>
#include <stack>

using namespace std;

vector<int> findEulerianCycle(unordered_map<int, vector<int>>& graph) {
    vector<int> cycle;
    stack<int> st;

    int start = -1;
    for (auto& [vertex, neighbors] : graph) {
        if (neighbors.size() % 2 != 0) {
            start = vertex;
            break;
        }
    }
    if (start == -1) {
        start = graph.begin()->first;
    }
    st.push(start);
    while (!st.empty()) {
        int current = st.top();
        if (graph[current].empty()) {
            cycle.push_back(current);
            st.pop();
        } else {
            int next = graph[current].back();
            graph[current].pop_back();
            st.push(next);
        }
    }
    reverse(cycle.begin(), cycle.end());
    return cycle;
}
int main() {
    unordered_map<int, vector<int>> graph = {
        {0, {1, 2}},
        {1, {0, 2, 3}},
        {2, {0, 1, 3}},
        {3, {1, 2, 4}},
        {4, {3}}
    };
    vector<int> eulerianCycle = findEulerianCycle(graph);
    for (int vertex : eulerianCycle) {
        cout << vertex << " ";
    }
    cout << endl;
    return 0;
}
